#! /bin/sh

set -e

function list_all_repos()
{
  cat subprojects
}

function list_active_repos()
{
  python list-active-repos.py
}

function emphasize()
{
  echo "------------------------------------------------------------------------"
  echo "$1"
  echo "------------------------------------------------------------------------"
}



CMD="$1"
case "$CMD" in
  help )
    echo "$0 supports the following commands:"
    echo "  list-{all,active}"
    echo "  for-{all,active} [-v] CMD"
    echo "  update-gitignore"
    echo "  clone BASE-URL [SUFFIX]"
    echo "  pull BASE-URL [SUFFIX] [BRANCH]"
    echo "  status"
    echo "  diff"
    echo "  clean [sudo]"
    echo "  install [python-command]"
    echo "  setup-env"
    echo "  env"
    ;;

  list-* )
    TP=${CMD##list-}
    list_${TP}_repos
    ;;

  for-* )
    shift
    TP=${CMD##for-}
    if test "$1" = "-v"; then 
      shift
      VERBOSE=1
    fi
    for n in `list_${TP}_repos`; do
      (
      cd $n
      if test "$VERBOSE" = 1; then
        echo "*** $n"
      fi
      "$@"
      )
    done
    ;;

  update-gitignore )
    (
      while read LINE; do
        if test "$LINE" = "# PROJECTS BELOW"; then
          echo "$LINE"
          break
        else
          echo "$LINE"
        fi
      done
      cat subprojects
    ) < .gitignore > new-gitig
    mv new-gitig .gitignore
    ;;
    
  clone )
    BASE_URL="$2"
    SUFFIX="$3"
    for n in `list_all_repos`; do
      if ! test -d $n; then 
        git clone $BASE_URL$n$SUFFIX
      fi
    done
    ;;

  pull )
    BASE_URL="$2"
    SUFFIX="$3"
    BRANCH="${4:-master}"
    for n in `list_all_repos`; do
      ( cd $n
        emphasize "PULL $n"
        if ! git pull $BASE_URL$n$SUFFIX $BRANCH ; then
          emphasize "PULL IN $n FAILED" 
          exit 1
        fi
      ) || exit 1
    done
    ;;

  diff )
    git diff
    for n in `list_all_repos`; do
      (cd $n; emphasize $n; git diff)
    done
    ;;

  status )
    git status
    for n in `list_all_repos`; do
      (cd $n; emphasize $n; git status)
    done
    ;;

  clean )
    PREFIX="$2"
    for n in `list_active_repos`; do
      (
        cd $n
        if test -e setup.py && test -d build; then
          $PREFIX rm -Rf build
        fi
      ) 
    done
    ;;

  install )
    PY_COMMAND="${2:-python}"
    for n in `list_active_repos`; do
      (
        set -e
        cd $n
        if test -e setup.py; then
          emphasize "INSTALLING $n"
          $PY_COMMAND setup.py install || emphasize "COMMAND $CMD ON $n FAILED!" ; exit 1
        fi
      ) || exit 1
    done
    emphasize "INSTALL OK."
    ;;

  setup-env )
    virtualenv env
    ;;

  env )
    echo "export PATH=`pwd`/env/bin:$PATH":w
    ;;

  * )
    echo "$0: invalid command $1."
    exit 1
    ;;
esac
