#! /bin/bash

set -e

function list_all_repos()
{
  cat subprojects
  if test -f extra-subprojects; then 
    cat extra-subprojects
  fi
}

function list_active_repos()
{
  python list-active-repos.py
}

function emphasize()
{
  echo "------------------------------------------------------------------------"
  echo "$1"
  echo "------------------------------------------------------------------------"
}

function show_help()
{
  echo "$0 supports the following commands:"
  echo "  list-{all,active}"
  echo "  for-{all,active} [-v] CMD"
  echo "  update-gitignore"
  echo "  pull BASE-URL [SUFFIX] [BRANCH]"
  echo "  status"
  echo "  diff"
  echo "  clean [sudo]"
  echo "  install [python-command]"
  echo "  develop [python-command]"
  echo "  {v,e}tags"
  echo "  setup-env"
  echo "  env"
  echo "  gitserve"
  echo "  test"
}



CMD="$1"
shift
case "$CMD" in
  help )
    show_help
    ;;

  list-* )
    TP=${CMD##list-}
    list_${TP}_repos
    ;;

  for-* )
    TP=${CMD##for-}
    if test "$1" = "-v"; then 
      shift
      VERBOSE=1
    fi
    for n in `list_${TP}_repos`; do
      (
      cd $n
      if test "$VERBOSE" = 1; then
        echo "*** $n"
      fi
      "$@"
      )
    done
    ;;

  update-gitignore )
    (
      while read LINE; do
        if test "$LINE" = "# PROJECTS BELOW"; then
          echo "$LINE"
          break
        else
          echo "$LINE"
        fi
      done
      cat subprojects
    ) < .gitignore > new-gitig
    mv new-gitig .gitignore
    ;;
    
  clone | pull )
    BASE_URL="$1"
    SUFFIX="$2"
    BRANCH="${3:-master}"
    for n in `list_all_repos`; do
      if ! test -d $n; then 
        git clone $BASE_URL$n$SUFFIX
      else
        ( cd $n
          if test "$(git status | head -n 1)" != "# On branch master"; then
            emphasize "$n NOT ON MASTER BRANCH -- ABORTING"
            exit 1
          else
            emphasize "PULL $n"
            if ! git pull $BASE_URL$n$SUFFIX $BRANCH ; then
              emphasize "PULL IN $n FAILED" 
              exit 1
            fi
          fi
        ) || exit 1
      fi
    done
    ;;

  diff )
    git diff
    for n in `list_all_repos`; do
      (cd $n; emphasize $n; git diff)
    done
    ;;

  status )
    git status || true
    for n in `list_all_repos`; do
      (cd $n; emphasize $n; git status)
    done
    ;;

  clean )
    PREFIX="$1"
    for n in `list_active_repos`; do
      (
        cd $n
        if test -e setup.py ; then
          $PREFIX rm -Rf build *.egg-info dist
        fi
      ) 
    done
    ;;

  install | develop )
    PY_COMMAND="${1:-python}"
    for n in `list_active_repos`; do
      (
        set -e
        cd $n
        if test -e setup.py; then
          emphasize "INSTALLING $n"
          if ! $PY_COMMAND setup.py $CMD ; then 
            emphasize "COMMAND $CMD ON $n FAILED!" 
            exit 1
          fi
        fi
      ) || exit 1
    done
    emphasize "INSTALL OK."
    ;;

  tags )
    echo "You now have to decide between 'etags' for Emacs and 'vtags' for vi--sorry."
    exit 1
    ;;

  vtags )
    rm -f tags TAGS
    ctags --exclude=build --exclude='*.html' -R `list_active_repos`
    ;;
    
  etags )
    rm -f tags TAGS
    ctags -e --exclude=build --exclude='*.html' -R `list_active_repos`
    ;;

  setup-env )
    virtualenv env
    ;;

  env )
    DIR=`dirname "$0"`
    MYDIR=$(cd "$DIR" && pwd) 
    echo "export PATH=$MYDIR/env/bin:$PATH"
    ;;

  gitserve )
    git daemon --export-all --verbose --base-path=`pwd` `pwd`
    ;;

  * )
    show_help
    echo
    echo "$0: invalid command $CMD."
    exit 1
    ;;
esac
